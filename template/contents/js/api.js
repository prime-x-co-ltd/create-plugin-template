(()=>{"use strict";var e={8894:function(e,t){var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{c(o.next(e))}catch(e){r(e)}}function p(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,p)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getConfig=t.saveCancel=t.saveConfig=t.getDepartments=t.getFields=t.getApps=t.Utils=void 0;const o=kintone.app.getId();var i,r;!function(e){e.fieldSort=(t,n=[])=>(t.forEach((t=>{switch(t.type){case"ROW":t.fields.forEach((e=>{"SPACER"!==e.type&&"LABEL"!==e.type&&"HR"!==e.type&&n.push(e.code)}));break;case"GROUP":e.fieldSort(t.layout,n);break;case"SUBTABLE":t.fields.forEach((e=>n.push(e.code)))}})),n)}(i=t.Utils||(t.Utils={})),t.getApps=()=>new Promise(((e,t)=>{const n=(e=0,t)=>new Promise(((o,i)=>{kintone.api(kintone.api.url("/k/v1/apps",!0),"GET",{offset:e}).then((r=>{let a=r.apps.map((e=>({appId:e.appId,name:e.name})));if(t&&(a=[...a,...t]),100!==r.apps.length)return o(a);n(e+100,a).then((e=>o(e))).catch((e=>i(e)))})).catch((e=>i(e)))}));n().then((t=>e(t))).catch((e=>t(e)))})),t.getFields=()=>n(void 0,void 0,void 0,(function*(){return console.log(i.PLUGIN_ID),kintone.api(kintone.api.url("/k/v1/app/form/layout",!0),"GET",{app:o}).then((e=>{const t=i.fieldSort(e.layout);return kintone.api(kintone.api.url("/k/v1/app/form/fields",!0),"GET",{app:o}).then((e=>{const n=[];return t.forEach((t=>{t in e.properties&&n.push({label:e.properties[t].label,code:e.properties[t].code,type:e.properties[t].type})})),Promise.resolve(n)})).catch((e=>Promise.reject(e)))})).catch((e=>Promise.reject(e)))})),t.getDepartments=()=>n(void 0,void 0,void 0,(function*(){return Promise.resolve([{key:"ac",name:"経理",checked:!1},{key:"hr",name:"人事",checked:!1},{key:"bp",name:"事業推進部",checked:!1},{key:"ap",name:"アカウント部",checked:!1}])})),t.saveConfig=e=>{const t=JSON.stringify(e);console.log("Bytes:",new Blob([t]).size),kintone.plugin.app.setConfig({config:t})},t.saveCancel=()=>history.back(),t.getConfig=()=>{const e=kintone.plugin.app.getConfig(i.PLUGIN_ID);return JSON.parse(e.config)},r=kintone.$PLUGIN_ID,i.PLUGIN_ID=r}},t={};!function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(8894)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wbGF0ZS8uL3NyYy9jb25maWcva2ludG9uZUFQSS50cyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJnZXRDb25maWciLCJzYXZlQ2FuY2VsIiwic2F2ZUNvbmZpZyIsImdldERlcGFydG1lbnRzIiwiZ2V0RmllbGRzIiwiZ2V0QXBwcyIsIlV0aWxzIiwiYXBwaWQiLCJraW50b25lIiwiYXBwIiwiZ2V0SWQiLCJQTFVHSU5fSUQiLCJmaWVsZFNvcnQiLCJsYXlvdXQiLCJjb2RlcyIsImZvckVhY2giLCJ2YWx1ZXMiLCJ0eXBlIiwiZmllbGRzIiwicHVzaCIsImNvZGUiLCJpbm5lckxvb3AiLCJvZmZzZXQiLCJfYXBwcyIsImFwaSIsInVybCIsInJlc3AiLCJhcHBzIiwibWFwIiwiYXBwSWQiLCJuYW1lIiwibGVuZ3RoIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwic29ydGVkIiwiZmllbGQiLCJwcm9wZXJ0aWVzIiwibGFiZWwiLCJrZXkiLCJjaGVja2VkIiwic3RhdGUiLCJjb25maWciLCJKU09OIiwic3RyaW5naWZ5IiwiQmxvYiIsInNpemUiLCJwbHVnaW4iLCJzZXRDb25maWciLCJoaXN0b3J5IiwiYmFjayIsInBhcnNlIiwiJFBMVUdJTl9JRCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1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LEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVXpELFFBRzNDLElBQUkwRCxFQUFTSCxFQUF5QkUsR0FBWSxDQUdqRHpELFFBQVMsSUFPVixPQUhBMkQsRUFBb0JGLEdBQVVHLEtBQUtGLEVBQU8xRCxRQUFTMEQsRUFBUUEsRUFBTzFELFFBQVN3RCxHQUdwRUUsRUFBTzFELFFDakJmd0QsQ0FBb0IsTyIsImZpbGUiOiJhcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDb25maWcgPSBleHBvcnRzLnNhdmVDYW5jZWwgPSBleHBvcnRzLnNhdmVDb25maWcgPSBleHBvcnRzLmdldERlcGFydG1lbnRzID0gZXhwb3J0cy5nZXRGaWVsZHMgPSBleHBvcnRzLmdldEFwcHMgPSBleHBvcnRzLlV0aWxzID0gdm9pZCAwO1xuY29uc3QgYXBwaWQgPSBraW50b25lLmFwcC5nZXRJZCgpO1xuLyoqVXRpbHMgfCBuYW1lc3BhY2Xjga/pnZ7mjqjlpajjgafjgZnvvIjkvb/jgYTjgZ/jgYvjgaPjgZ/jgaDjgZHvvIkgKi9cbnZhciBVdGlscztcbihmdW5jdGlvbiAoVXRpbHMpIHtcbiAgICBVdGlscy5maWVsZFNvcnQgPSAobGF5b3V0LCBjb2RlcyA9IFtdKSA9PiB7XG4gICAgICAgIGxheW91dC5mb3JFYWNoKCh2YWx1ZXMpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodmFsdWVzLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdST1cnOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuZmllbGRzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUudHlwZSAhPT0gJ1NQQUNFUicgJiYgdmFsdWUudHlwZSAhPT0gJ0xBQkVMJyAmJiB2YWx1ZS50eXBlICE9PSAnSFInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVzLnB1c2godmFsdWUuY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdHUk9VUCc6XG4gICAgICAgICAgICAgICAgICAgIFV0aWxzLmZpZWxkU29ydCh2YWx1ZXMubGF5b3V0LCBjb2Rlcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NVQlRBQkxFJzpcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZpZWxkcy5mb3JFYWNoKCh2YWx1ZSkgPT4gY29kZXMucHVzaCh2YWx1ZS5jb2RlKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvZGVzO1xuICAgIH07XG59KShVdGlscyA9IGV4cG9ydHMuVXRpbHMgfHwgKGV4cG9ydHMuVXRpbHMgPSB7fSkpO1xuY29uc3QgZ2V0QXBwcyA9ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBpbm5lckxvb3AgPSAob2Zmc2V0ID0gMCwgX2FwcHMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAga2ludG9uZVxuICAgICAgICAgICAgICAgICAgICAuYXBpKGtpbnRvbmUuYXBpLnVybCgnL2svdjEvYXBwcycsIHRydWUpLCAnR0VUJywgeyBvZmZzZXQ6IG9mZnNldCB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXBwcyA9IHJlc3AuYXBwcy5tYXAoKGFwcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBJZDogYXBwLmFwcElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFwcC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYXBwcylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcHMgPSBbLi4uYXBwcywgLi4uX2FwcHNdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcC5hcHBzLmxlbmd0aCA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lckxvb3Aob2Zmc2V0ICsgMTAwLCBhcHBzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChhcHBzKSA9PiByZXNvbHZlKGFwcHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShhcHBzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5uZXJMb29wKClcbiAgICAgICAgICAgIC50aGVuKChyZXNwKSA9PiByZXNvbHZlKHJlc3ApKVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmdldEFwcHMgPSBnZXRBcHBzO1xuY29uc3QgZ2V0RmllbGRzID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc29sZS5sb2coVXRpbHMuUExVR0lOX0lEKTtcbiAgICByZXR1cm4ga2ludG9uZVxuICAgICAgICAuYXBpKGtpbnRvbmUuYXBpLnVybCgnL2svdjEvYXBwL2Zvcm0vbGF5b3V0JywgdHJ1ZSksICdHRVQnLCB7XG4gICAgICAgIGFwcDogYXBwaWQsXG4gICAgfSlcbiAgICAgICAgLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gVXRpbHMuZmllbGRTb3J0KHJlc3AubGF5b3V0KTtcbiAgICAgICAgcmV0dXJuIGtpbnRvbmVcbiAgICAgICAgICAgIC5hcGkoa2ludG9uZS5hcGkudXJsKCcvay92MS9hcHAvZm9ybS9maWVsZHMnLCB0cnVlKSwgJ0dFVCcsIHtcbiAgICAgICAgICAgIGFwcDogYXBwaWQsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRzID0gW107XG4gICAgICAgICAgICBzb3J0ZWQuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQgaW4gcmVzcC5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiByZXNwLnByb3BlcnRpZXNbZmllbGRdLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogcmVzcC5wcm9wZXJ0aWVzW2ZpZWxkXS5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVzcC5wcm9wZXJ0aWVzW2ZpZWxkXS50eXBlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmllbGRzKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBQcm9taXNlLnJlamVjdChlcnIpKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4gUHJvbWlzZS5yZWplY3QoZXJyKSk7XG59KTtcbmV4cG9ydHMuZ2V0RmllbGRzID0gZ2V0RmllbGRzO1xuY29uc3QgZ2V0RGVwYXJ0bWVudHMgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtcbiAgICAgICAgeyBrZXk6ICdhYycsIG5hbWU6ICfntYznkIYnLCBjaGVja2VkOiBmYWxzZSB9LFxuICAgICAgICB7IGtleTogJ2hyJywgbmFtZTogJ+S6uuS6iycsIGNoZWNrZWQ6IGZhbHNlIH0sXG4gICAgICAgIHsga2V5OiAnYnAnLCBuYW1lOiAn5LqL5qWt5o6o6YCy6YOoJywgY2hlY2tlZDogZmFsc2UgfSxcbiAgICAgICAgeyBrZXk6ICdhcCcsIG5hbWU6ICfjgqLjgqvjgqbjg7Pjg4jpg6gnLCBjaGVja2VkOiBmYWxzZSB9LFxuICAgIF0pO1xufSk7XG5leHBvcnRzLmdldERlcGFydG1lbnRzID0gZ2V0RGVwYXJ0bWVudHM7XG5jb25zdCBzYXZlQ29uZmlnID0gKHN0YXRlKSA9PiB7XG4gICAgLy8gY29uZmln44Gva2V5OnZhbHVl44GY44KD44Gq44GE44Go44OA44OhXG4gICAgY29uc3QgY29uZmlnID0gSlNPTi5zdHJpbmdpZnkoc3RhdGUpO1xuICAgIGNvbnNvbGUubG9nKCdCeXRlczonLCBuZXcgQmxvYihbY29uZmlnXSkuc2l6ZSk7XG4gICAga2ludG9uZS5wbHVnaW4uYXBwLnNldENvbmZpZyh7IGNvbmZpZzogY29uZmlnIH0pO1xuICAgIHJldHVybjtcbn07XG5leHBvcnRzLnNhdmVDb25maWcgPSBzYXZlQ29uZmlnO1xuY29uc3Qgc2F2ZUNhbmNlbCA9ICgpID0+IGhpc3RvcnkuYmFjaygpO1xuZXhwb3J0cy5zYXZlQ2FuY2VsID0gc2F2ZUNhbmNlbDtcbmNvbnN0IGdldENvbmZpZyA9ICgpID0+IHtcbiAgICBjb25zdCBjb25maWcgPSBraW50b25lLnBsdWdpbi5hcHAuZ2V0Q29uZmlnKFV0aWxzLlBMVUdJTl9JRCk7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoY29uZmlnLmNvbmZpZyk7XG59O1xuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG4oKFBMVUdJTl9JRCkgPT4ge1xuICAgIFV0aWxzLlBMVUdJTl9JRCA9IFBMVUdJTl9JRDtcbiAgICByZXR1cm47XG59KShraW50b25lLiRQTFVHSU5fSUQpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYTJsdWRHOXVaVUZRU1M1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbXRwYm5SdmJtVkJVRWt1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN08wRkJTVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlFUdEJRVVZxUXl4MVEwRkJkVU03UVVGRGRrTXNTVUZCYVVJc1MwRkJTeXhEUVRCQ2NrSTdRVUV4UWtRc1YwRkJhVUlzUzBGQlN6dEpRVTlTTEdWQlFWTXNSMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVTdVVUZETVVRc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUTNwQ0xGRkJRVkVzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlR0blFrRkRjRUlzUzBGQlN5eExRVUZMTzI5Q1FVTlVMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVN2QwSkJReTlDTEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4UFFVRlBMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eEpRVUZKT3pSQ1FVTXpSU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHR2UWtGRGVFSXNRMEZCUXl4RFFVRkRMRU5CUVVFN2IwSkJRMFlzVFVGQlN6dG5Ra0ZEVGl4TFFVRkxMRTlCUVU4N2IwSkJRMWdzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCTzI5Q1FVTnlReXhOUVVGTE8yZENRVU5PTEV0QlFVc3NWVUZCVlR0dlFrRkRaQ3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdHZRa0ZEZUVRc1RVRkJTenRoUVVOT08xRkJRMFlzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZEUml4UFFVRlBMRXRCUVVzc1EwRkJRVHRKUVVOaUxFTkJRVU1zUTBGQlFUdEJRVU5HTEVOQlFVTXNSVUV4UW1kQ0xFdEJRVXNzUjBGQlRDeGhRVUZMTEV0QlFVd3NZVUZCU3l4UlFUQkNja0k3UVVGblFrMHNUVUZCVFN4UFFVRlBMRWRCUVZrc1IwRkJSeXhGUVVGRk8wbEJRM0JETEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVTdVVUZEZEVNc1RVRkJUU3hUUVVGVExFZEJRV01zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRk8xbEJRMnhFTEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVTdaMEpCUTNSRExFOUJRVTg3Y1VKQlEwd3NSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNN2NVSkJRMjVGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8yOUNRVU5rTEVsQlFVa3NTVUZCU1N4SFFVRmpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCVVN4RlFVRkZMRVZCUVVVN2QwSkJRMmhFTEU5QlFVODdORUpCUTA0c1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eExRVUZMT3pSQ1FVTm9RaXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVazdlVUpCUTJRc1EwRkJRVHR2UWtGRFJpeERRVUZETEVOQlFVTXNRMEZCUVR0dlFrRkRSaXhKUVVGSkxFdEJRVXM3ZDBKQlFVVXNTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUVR0dlFrRkRja01zU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1MwRkJTeXhIUVVGSExFVkJRVVU3ZDBKQlF6ZENMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXpzMlFrRkRNMElzU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdOa0pCUXpkQ0xFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVRTdjVUpCUXpkQ08zbENRVUZOTzNkQ1FVTk9MRTlCUVU4c1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzNGQ1FVTndRanRuUWtGRFJpeERRVUZETEVOQlFVTTdjVUpCUTBRc1MwRkJTeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFUdFpRVU01UWl4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOSUxFTkJRVU1zUTBGQlFUdFJRVU5FTEZOQlFWTXNSVUZCUlR0aFFVTlVMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yRkJRemRDTEV0QlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRPVUlzUTBGQlF5eERRVUZETEVOQlFVRTdRVUZEU0N4RFFVRkRMRU5CUVVFN1FVRTNRbGtzVVVGQlFTeFBRVUZQTEZkQk5rSnVRanRCUVdOTkxFMUJRVTBzVTBGQlV5eEhRVUZqTEVkQlFWTXNSVUZCUlR0SlFVTTVReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRKUVVNMVFpeFBRVUZQTEU5QlFVODdVMEZEV2l4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVVzU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZPMUZCUXpORUxFZEJRVWNzUlVGQlJTeExRVUZMTzB0QlExWXNRMEZCUXp0VFFVTkVMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTzFGQlEyUXNUVUZCVFN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1VVRkRNME1zVDBGQlR5eFBRVUZQTzJGQlExb3NSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEhWQ1FVRjFRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlR0WlFVTXpSQ3hIUVVGSExFVkJRVVVzUzBGQlN6dFRRVU5XTEVOQlFVTTdZVUZEUkN4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5rTEUxQlFVMHNUVUZCVFN4SFFVRm5RaXhGUVVGRkxFTkJRVUU3V1VGRE9VSXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTzJkQ1FVTjRRaXhKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMjlDUVVNM1FpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRPM2RDUVVOWUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFdEJRVXM3ZDBKQlEyNURMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRWxCUVVrN2QwSkJRMnBETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVazdjVUpCUTJwRExFTkJRVU1zUTBGQlFUdHBRa0ZEUmp0WlFVTkdMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRMFlzVDBGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8xRkJReTlDTEVOQlFVTXNRMEZCUXp0aFFVTkVMRXRCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzUkRMRU5CUVVNc1EwRkJRenRUUVVORUxFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkJPMEZCUTNSRExFTkJRVU1zUTBGQlFTeERRVUZCTzBGQk5VSlpMRkZCUVVFc1UwRkJVeXhoUVRSQ2NrSTdRVUZaVFN4TlFVRk5MR05CUVdNc1IwRkJiVUlzUjBGQlV5eEZRVUZGTzBsQlEzaEVMRTlCUVU4c1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF6dFJRVU4wUWl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRk8xRkJRM3BETEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVN1VVRkRla01zUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlR0UlFVTTFReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTzB0QlF6ZERMRU5CUVVNc1EwRkJRVHRCUVVOSUxFTkJRVU1zUTBGQlFTeERRVUZCTzBGQlVGa3NVVUZCUVN4alFVRmpMR3RDUVU4eFFqdEJRVTFOTEUxQlFVMHNWVUZCVlN4SFFVRmxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVU3U1VGREwwTXNNRUpCUVRCQ08wbEJRekZDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdTVUZEY0VNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUXpsRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkJPMGxCUTJoRUxFOUJRVTA3UVVGRFVDeERRVUZETEVOQlFVRTdRVUZPV1N4UlFVRkJMRlZCUVZVc1kwRk5kRUk3UVVGTlRTeE5RVUZOTEZWQlFWVXNSMEZCWlN4SFFVRkhMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVRTdRVUZCTjBNc1VVRkJRU3hWUVVGVkxHTkJRVzFETzBGQlRXNUVMRTFCUVUwc1UwRkJVeXhIUVVGakxFZEJRVWNzUlVGQlJUdEpRVU40UXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBsQlF6VkVMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1FVRkRha01zUTBGQlF5eERRVWRCTzBGQlRsa3NVVUZCUVN4VFFVRlRMR0ZCVFhKQ08wRkJRVUVzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCVVN4RlFVRkZPMGxCUTNKQ0xFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkJPMGxCUXpOQ0xFOUJRVTA3UVVGRFVDeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVUVpZlE9PSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGVcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDg4OTQpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==