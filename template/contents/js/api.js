(()=>{"use strict";var e={8894:function(e,t){var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function p(e){try{s(o.next(e))}catch(e){r(e)}}function a(e){try{s(o.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(p,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.saveConfig=t.getFields=t.getApps=t.Utils=void 0;const o=kintone.app.getId();var i,r;!function(e){e.fieldSort=(t,n=[])=>(t.forEach((t=>{switch(t.type){case"ROW":t.fields.forEach((e=>{"SPACER"!==e.type&&"LABEL"!==e.type&&"HR"!==e.type&&n.push(e.code)}));break;case"GROUP":e.fieldSort(t.layout,n);break;case"SUBTABLE":t.fields.forEach((e=>n.push(e.code)))}})),n)}(i=t.Utils||(t.Utils={})),t.getApps=()=>new Promise(((e,t)=>{const n=(e=0,t)=>new Promise(((o,i)=>{kintone.api(kintone.api.url("/k/v1/apps",!0),"GET",{offset:e}).then((r=>{let p=r.apps.map((e=>({appId:e.appId,name:e.name})));if(t&&(p=[...p,...t]),100!==r.apps.length)return o(p);n(e+100,p).then((e=>o(e))).catch((e=>i(e)))})).catch((e=>i(e)))}));n().then((t=>e(t))).catch((e=>t(e)))})),t.getFields=()=>n(void 0,void 0,void 0,(function*(){return console.log(i.PLUGIN_ID),kintone.api(kintone.api.url("/k/v1/app/form/layout",!0),"GET",{app:o}).then((e=>{const t=i.fieldSort(e.layout);return kintone.api(kintone.api.url("/k/v1/app/form/fields",!0),"GET",{app:o}).then((e=>{const n=[];return t.forEach((t=>{t in e.properties&&n.push({label:e.properties[t].label,code:e.properties[t].code,type:e.properties[t].type})})),Promise.resolve(n)})).catch((e=>Promise.reject(e)))})).catch((e=>Promise.reject(e)))})),t.saveConfig=e=>{console.log(e),kintone.plugin.app.setConfig({name:"Tom",age:25})},r=kintone.$PLUGIN_ID,i.PLUGIN_ID=r}},t={};!function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(8894)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,