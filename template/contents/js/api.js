(()=>{"use strict";var e={8894:function(e,t){var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{c(o.next(e))}catch(e){r(e)}}function p(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,p)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getConfig=t.saveCancel=t.saveConfig=t.getDepartments=t.getFields=t.getApps=t.Utils=void 0;const o=kintone.app.getId();var i;!function(e){e.fieldSort=(t,n=[])=>(t.forEach((t=>{switch(t.type){case"ROW":t.fields.forEach((e=>{"SPACER"!==e.type&&"LABEL"!==e.type&&"HR"!==e.type&&n.push(e.code)}));break;case"GROUP":e.fieldSort(t.layout,n);break;case"SUBTABLE":t.fields.forEach((e=>n.push(e.code)))}})),n)}(i=t.Utils||(t.Utils={})),t.getApps=()=>new Promise(((e,t)=>{const n=(e=0,t)=>new Promise(((o,i)=>{kintone.api(kintone.api.url("/k/v1/apps",!0),"GET",{offset:e}).then((r=>{let a=r.apps.map((e=>({appId:e.appId,name:e.name})));if(t&&(a=[...a,...t]),100!==r.apps.length)return o(a);n(e+100,a).then((e=>o(e))).catch((e=>i(e)))})).catch((e=>i(e)))}));n().then((t=>e(t))).catch((e=>t(e)))})),t.getFields=()=>n(void 0,void 0,void 0,(function*(){return kintone.api(kintone.api.url("/k/v1/app/form/layout",!0),"GET",{app:o}).then((e=>{const t=i.fieldSort(e.layout);return kintone.api(kintone.api.url("/k/v1/app/form/fields",!0),"GET",{app:o}).then((e=>{const n=[];return t.forEach((t=>{t in e.properties&&n.push({label:e.properties[t].label,code:e.properties[t].code,type:e.properties[t].type})})),Promise.resolve(n)})).catch((e=>Promise.reject(e)))})).catch((e=>Promise.reject(e)))})),t.getDepartments=()=>n(void 0,void 0,void 0,(function*(){return Promise.resolve([{key:"ac",name:"経理",checked:!1},{key:"hr",name:"人事",checked:!1},{key:"bp",name:"事業推進部",checked:!1},{key:"ap",name:"アカウント部",checked:!1}])})),t.saveConfig=e=>{const t=JSON.stringify(e);console.log("Bytes:",new Blob([t]).size),kintone.plugin.app.setConfig({config:t})},t.saveCancel=()=>history.back(),t.getConfig=e=>{const t=kintone.plugin.app.getConfig(e);return JSON.parse(t.config)}}},t={};!function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(8894)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,